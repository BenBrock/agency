#pragma once

#include <type_traits>
#include <barrier>
#include <functional>
#include <iostream>
#include "tuple_tail.hpp"

namespace std
{


template<class ExecutionGroup, class OtherChild>
struct __rebind_execution_group
{
  typedef typename ExecutionGroup::template rebind<OtherChild>::other type;
};


template<template<class, class...> class ExecutionGroup, class OriginalChild, class... T, class OtherChild>
struct __rebind_execution_group<ExecutionGroup<OriginalChild, T...>, OtherChild>
{
  typedef ExecutionGroup<OtherChild, T...> type;
};


template<typename T>
  struct __has_child_type
{
  typedef char yes_type;
  typedef int  no_type;
  template<typename S> static yes_type test(typename S::child_type *);
  template<typename S> static no_type  test(...);
  static bool const value = sizeof(test<T>(0)) == sizeof(yes_type);
  typedef std::integral_constant<bool, value> type;
};


template<typename T>
struct __child_type
{
  typedef typename T::child_type type;
};


template<typename T>
struct __identity
{
  typedef T type;
};


template<bool b, typename T, typename F>
struct __lazy_conditional;


template<typename T, typename F>
struct __lazy_conditional<true,T,F>
{
  typedef typename T::type type;
};


template<typename T, typename F>
struct __lazy_conditional<false,T,F>
{
  typedef typename F::type type;
};


template<class ExecutionGroup>
class execution_group_traits
{
  private:
    template<class T>
    static constexpr size_t depth_impl(T, std::false_type has_child)
    {
      return 0;
    }

    template<class T>
    static constexpr size_t depth_impl(T, std::true_type has_child)
    {
      return 1 + execution_group_traits<child_type>::depth;
    }

  public:
    typedef ExecutionGroup                                 group_type;
    typedef typename ExecutionGroup::param_type            param_type;
    typedef typename ExecutionGroup::size_type             size_type;

    typedef typename __lazy_conditional<
      __has_child_type<group_type>::value,
      __child_type<group_type>,
      __identity<void>
    >::type                                                child_type;

    // XXX consider renaming to nesting_depth or grouping_depth
    //     to emphasize that agents have depth 0
    // XXX alternatively, make it illegal to use execution_group_traits on non-groups
    constexpr static size_t depth = depth_impl(0, typename __has_child_type<group_type>::type());
    
    template<class OtherChild>
    using rebind_execution_group = typename __rebind_execution_group<group_type, OtherChild>::type;

    template<class ParamTuple, class IndexTuple>
    static group_type make(const ParamTuple& params, const IndexTuple& indices)
    {
      return group_type(params, indices);
    }

    template<class OtherChild>
    static rebind_execution_group<OtherChild> rebind_child(const group_type& g, OtherChild&& child)
    {
      return rebind_execution_group<OtherChild>(g.param(), g.index(), std::move(child));
    }

    // XXX rethink whether we need both reindex and something which links two groups, possibly with new indices
    // XXX shouldn't we reindex the entire tree at the same time?
    // XXX shouldn't we recieve a tuple like make()?
    static void reindex(group_type& g, size_type new_index)
    {
      g.reindex(new_index);
    }

    class range_type
    {
      public:
        range_type(size_type b, size_type e) : begin_(b), end_(e) {}
        size_type begin() const { return begin_; }
        size_type end() const { return end_; }

      private:
        size_type begin_, end_;
    };

    static range_type range(const param_type &params)
    {
      return range_type{params.begin(), params.end()};
    }
};


class agent
{
  public:
    struct param_type {};
    typedef size_t size_type;

    // XXX is size() necessary?
    //     I don't think we ever use it
    size_type size() const { return 1; }

    size_type index() const { return index_; }

    agent(agent&& other) = default;

    param_type param() const
    {
      return param_type();
    }

  private:
    friend class execution_group_traits<agent>;

    agent(const std::tuple<param_type>&, const std::tuple<size_type>& index)
      : index_(std::get<0>(index))
    {}

    void reindex(size_type index)
    {
      index_ = index;
    }

    size_type index_;
};


template<class ExecutionGroup>
class __execution_group_base
{
  public:
    typedef ExecutionGroup                                         child_type;
    typedef typename execution_group_traits<child_type>::size_type size_type;

    class param_type
    {
      public:
        param_type(const param_type& other)
          : param_type(other.begin(), other.end())
        {}

        param_type(size_type b, size_type e)
          : begin_(b), end_(e)
        {}

        param_type(size_type n)
          : begin_(0), end_(n)
        {}

        size_type begin() const
        {
          return begin_;
        }

        size_type end() const
        {
          return end_;
        }

      private:
        size_type begin_, end_;
    };

    param_type param() const
    {
      return param_type(indices_begin(), indices_end());
    }

    size_type indices_begin() const { return indices_begin_; }
    size_type indices_end() const { return indices_end_; }
    size_type size() const { return indices_end() - indices_begin(); }
    size_type index() const { return index_; }
    ExecutionGroup &child() { return child_; }
    const ExecutionGroup &child() const { return child_; }

  private:
    template<class> friend class execution_group_traits;

    size_type index_;
    size_type indices_begin_;
    size_type indices_end_;
    child_type child_;

    void reindex(size_type index)
    {
      index_ = index;
    }

  protected:
    typedef execution_group_traits<child_type> child_traits;

    template<class Param>
    __execution_group_base(const Param& params, size_type index, child_type&& chld)
      : index_(index),
        indices_begin_(params.begin()),
        indices_end_(params.end()),
        child_(std::move(chld))
    {}

    template<class ParamTuple, class IndexTuple>
    __execution_group_base(const ParamTuple& params, const IndexTuple& indices)
      : __execution_group_base(std::get<0>(params),
                               std::get<0>(indices),
                               child_traits::make(tuple_tail(params), tuple_tail(indices)))
    {}
};


template<class ExecutionGroup = std::agent>
class sequential_group : public __execution_group_base<ExecutionGroup>
{
  public:
    using __execution_group_base<ExecutionGroup>::__execution_group_base;
};


template<class ExecutionGroup = std::agent>
class parallel_group : public __execution_group_base<ExecutionGroup>
{
  public:
    using __execution_group_base<ExecutionGroup>::__execution_group_base;
};


template<class ExecutionGroup = std::agent>
class concurrent_group : public __execution_group_base<ExecutionGroup>
{
  private:
    typedef __execution_group_base<ExecutionGroup> super_t;

  public:
    typedef typename super_t::size_type size_type;

    class param_type : public super_t::param_type
    {
      public:
        param_type(size_type begin, size_type end, std::reference_wrapper<std::barrier> barrier)
          : super_t::param_type(begin,end),
            barrier_(barrier)
        {}

        param_type(size_type n, std::reference_wrapper<std::barrier> barrier)
          : param_type(0, n, barrier)
        {}

        param_type(const param_type &other)
          : param_type(other.begin(), other.end(), other.barrier())
        {}

        std::reference_wrapper<std::barrier> barrier() const
        {
          return barrier_;
        }

      private:
        std::reference_wrapper<std::barrier> barrier_;
    };

    param_type param() const
    {
      return param_type(super_t::indices_begin(), super_t::indices_end(), barrier_);
    }

    template<class OtherGroup>
    struct rebind
    {
      typedef concurrent_group<OtherGroup> other;
    };

    // XXX consider making this function const
    void wait()
    {
      barrier_.count_down_and_wait();
    }

  private:
    template<class> friend class execution_group_traits;

    template<class ParamTuple, class IndexTuple>
    concurrent_group(const ParamTuple& params, const IndexTuple& indices)
      : super_t(params, indices),
        barrier_(std::get<0>(params).barrier())
    {}

    template<class Param>
    concurrent_group(const Param& params, size_type index, ExecutionGroup&& chld)
      : super_t(params, index, std::move(chld)),
        barrier_(params.barrier())
    {}

    std::barrier &barrier_;
};


template<class T>
struct __has_child_impl
{
  typedef char yes_type;
  struct no_type {char x[2];};

  template<class U> static yes_type test(decltype(&U::child));
  template<class U> static no_type  test(...);

  public:
    const static bool value = sizeof(test<T>(0)) == sizeof(yes_type);
};


template<class T>
struct __has_child :
  std::integral_constant<
    bool,
    __has_child_impl<T>::value
  >
{};


// XXX we shouldn't recursively create child_
// XXX instead a new execution_view should be created on demand inside the child() function
// XXX using a type erasure idiom
class execution_view
{
  public:
    typedef size_t size_type;

    inline execution_view(const execution_view &g)
      : index_(g.index_),
        size_(g.size_),
        self_(g.self_),
        child_(g.child_ ? new execution_view(g.child()) : nullptr)
    {}

    inline execution_view(execution_view &&g) = default;

    template<typename ExecutionGroup>
    execution_view(ExecutionGroup& g,
                   typename enable_if<__has_child<ExecutionGroup>::value>::type* = 0)
      : index_(g.index()),
        size_(g.size()),
        self_(&g),
        child_(new execution_view(g.child()))
    {}

    template<typename ExecutionGroup>
    execution_view(ExecutionGroup& g,
                   typename enable_if<!__has_child<ExecutionGroup>::value>::type* = 0)
      : index_(g.index()),
        size_(g.size()),
        self_(&g),
        child_()
    {}

    inline execution_view &operator=(execution_view &&g) = default;

    inline execution_view &operator=(const execution_view &g)
    {
      index_ = g.index_;
      size_ = g.size_;
      self_ = g.self_;
      child_ = g.child_ ? std::unique_ptr<execution_view>(new execution_view(g.child())) : nullptr;
      return *this;
    }

    template<typename ExecutionGroup>
    typename enable_if<__has_child<ExecutionGroup>::value, execution_view &>::type
      operator=(ExecutionGroup& g)
    {
      index_ = g.index();
      size_ = g.size();
      self_ = g.self_;
      *child_ = g.child();
    }

    template<typename ExecutionGroup>
    typename enable_if<!__has_child<ExecutionGroup>::value,execution_view &>::type
      operator=(ExecutionGroup& g)
    {
      index_ = g.index();
      size_ = g.size();
      self_ = g.self_;
      child_ = nullptr;
    }

    inline size_type size() const
    {
      return size_;
    }

    // XXX could rename this to rank() to distinguish betwen 1D rank and ND index
    inline size_type index() const
    {
      return index_;
    }

    // XXX i don't like the name child
    inline execution_view child()
    {
      return child_ ? *child_ : *this;
    }

    // XXX i don't like the name child
    const execution_view child() const
    {
      return child_ ? *child_ : *this;
    }

  private:
    // allow empty execution_view for this_group() below
    inline execution_view(std::nullptr_t)
      : index_(0),
        size_(0),
        self_(nullptr),
        child_(nullptr)
    {}

    friend execution_view &this_group();

    size_type index_;
    size_type size_;
    void *self_;
    std::unique_ptr<execution_view> child_;
};


// XXX implement these later
//// cast execution_group to a particular type of ExecutionGroup
//// throws if typeof() doesn't match
//template<typename ExecutionGroup>
//ExecutionGroup &get(execution_group &g);
//
//
//// cast execution_group to a particular type of ExecutionGroup
//template<typename ExecutionGroup>
//const ExecutionGroup &get(const execution_group &g);


// XXX this should return a value created on demand
inline execution_view &this_group()
{
  // XXX this should be initialized to a sequential_group with a single agent executing in this_thread
  static thread_local execution_view current{nullptr};
  return current;
}


inline execution_view __set_this_group(const execution_view &g)
{
  execution_view old_group = this_group();
  this_group() = g;
  return old_group;
}


inline execution_view __set_this_group(execution_view &&g)
{
  execution_view old_group = this_group();
  this_group() = std::move(g);
  return old_group;
}


class __scoped_group
{
  public:
    template<class ExecutionGroup>
    __scoped_group(ExecutionGroup &this_group)
       : old_group_(__set_this_group(this_group))
    {}

    inline ~__scoped_group()
    {
      // restore old group
      __set_this_group(std::move(old_group_));
    }

  private:
    execution_view old_group_;
};


class __integer_range
{
  public:
    __integer_range(size_t b, size_t e)
      : begin_(b), end_(e)
    {}

    inline size_t size() const
    {
      return end() - begin();
    }

    inline size_t begin() const
    {
      return begin_;
    }

    inline size_t end() const
    {
      return end_;
    }

    inline bool contains(size_t x) const
    {
      return begin() <= x && x < end();
    }

    inline friend std::ostream &operator<<(std::ostream &os, const __integer_range &rng)
    {
      os << "[" << rng.begin() << ", " << rng.end() << ")";
      return os;
    }

  private:
    size_t begin_, end_;
};


}

