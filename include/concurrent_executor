#pragma once

#include <thread>
#include <vector>
#include <memory>
#include <future>
#include <execution_categories>
#include <algorithm>

namespace std
{


class concurrent_executor
{
  public:
    using execution_category = std::sequential_execution_tag;

    // XXX we could potentially parameterize this
    using index_type = size_t;

    template<class Function>
    void bulk_add(size_t n, Function f)
    {
      for(index_type i = 0; i < n; ++i)
      {
        std::thread t([=]
        {
          f(i);
        });

        t.detach();
      }
    }
};


template<class Function, class... Args>
std::future<void> bulk_async(concurrent_executor& ex, size_t n, Function&& f, Args&&... args)
{
  auto g = std::bind(std::forward<Function>(f), std::placeholders::_1, std::function<Args>(args)...);

  using vector_type = std::vector<std::promise<void>>;

  std::shared_ptr<vector_type> promises = std::make_shared<vector_type>(n);

  ex.bulk_add(n, [=](size_t i)
  {
    g(i);

    (*promises)[i].set_value();
  });

  std::vector<std::future<void>> futures(n);
  std::transform(promises->begin(), promises->end(), futures.begin(), [](std::promise<void>& p)
  {
    return p.get_future();
  });

  // XXX could use a transform iterator instead of a separate vector of futures here
  return std::when_all(futures.begin(), futures.end());
}


template<class Function, class... Args>
void bulk_invoke(concurrent_executor& ex, size_t n, Function&& f, Args&&... args)
{
  std::bulk_invoke(ex, n, std::bind(std::forward<Function>(f), std::placeholders::_1, std::forward<Args>(args)...)).wait();
}


}

