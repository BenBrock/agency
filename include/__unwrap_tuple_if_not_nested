#pragma once

#include <execution_categories>
#include <tuple>
#include <utility>

namespace std
{

template<class ExecutionCategory, class Tuple>
static auto __unwrap_tuple_if_not_nested_impl(ExecutionCategory, Tuple&& t)
  -> decltype(std::get<0>(std::forward<Tuple>(t)))
{
  return std::get<0>(std::forward<Tuple>(t));
}

template<class ExecutionCategory1, class ExecutionCategory2, class Tuple>
static auto __unwrap_tuple_if_not_nested_impl(nested_execution_tag<ExecutionCategory1,ExecutionCategory2>, Tuple&& t)
  -> decltype(std::forward<Tuple>(t))
{
  return std::forward<Tuple>(t);
}


template<class ExecutionCategory, class Tuple>
auto __unwrap_tuple_if_not_nested(Tuple&& t)
  -> decltype(
       __unwrap_tuple_if_not_nested_impl(ExecutionCategory(), std::forward<Tuple>(t))
     )
{
  return __unwrap_tuple_if_not_nested_impl(ExecutionCategory(), std::forward<Tuple>(t));
}

}

