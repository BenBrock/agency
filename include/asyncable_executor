#pragma once

// XXX this executor is just for porting in this branch
// XXX we should get rid of it ASAP

#include <exception_list>
#include <vector>
#include <future>
#include <functional>

namespace std
{


template<class Asyncable>
class asyncable_executor
{
  public:
    asyncable_executor(const Asyncable& asyncable)
      : asyncable_(asyncable)
    {}

    const Asyncable& asyncable() const
    {
      return asyncable_;
    }

    Asyncable& asyncable()
    {
      return asyncable_;
    }

  private:
    Asyncable asyncable_;
};


template<class Asyncable, class Function, class... Args>
std::future<void> bulk_async(asyncable_executor<Asyncable>& ex, size_t n, Function&& f, Args&&... args)
{
  auto g = std::bind(f, std::placeholders::_1, args...);

  std::vector<std::future<void>> futures(n);
  
  for(size_t i = 0; i < n; ++i)
  {
    futures[i] = async(ex.asyncable(), [=]
    {
      g(i);
    });
  }
  
  return when_all(futures.begin(), futures.end());
}


template<class Asyncable, class Function, class... Args>
void bulk_sync(asyncable_executor<Asyncable>& ex, size_t n, Function&& f, Args&&... args)
{
  return std::bulk_async(ex, n, std::forward<Function>(f), std::forward<Args>(args)...).get();
}


}

