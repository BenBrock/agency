#pragma once

// XXX this executor is just for porting in this branch
// XXX we should get rid of it ASAP

#include <exception_list>
#include <vector>
#include <future>

namespace std
{


template<class Asyncable>
class asyncable_executor
{
  public:
    asyncable_executor(const Asyncable& asyncable)
      : asyncable_(asyncable)
    {}

    const Asyncable& asyncable() const
    {
      return asyncable_;
    }

    Asyncable& asyncable()
    {
      return asyncable_;
    }

    template<class Function>
    std::future<void> bulk_async(size_t n, Function f)
    {
      std::vector<std::future<void>> futures(n);

      for(size_t i = 0; i < n; ++i)
      {
        futures[i] = async(asyncable(), [=]
        {
          f(i);
        });
      }

      return when_all(futures.begin(), futures.end());
    }

    template<class Function>
    void bulk_sync(size_t n, Function f)
    {
      return bulk_async(n, f).get();
    }

  private:
    Asyncable asyncable_;
};


}


