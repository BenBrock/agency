#pragma once

#include <future>
#include <utility>
#include <vector>
#include <barrier>
#include <functional>
#include <type_traits>
#include <execution_group>
#include <exception_list>


namespace std
{


// XXX add is_execution_policy_v
template<class T> struct is_execution_policy : std::false_type {};


// XXX consider merging this functionality into __grouped_execution_policy
template<class OuterPolicy, class InnerPolicy>
struct __nested_execution_policy
{
  OuterPolicy outer_exec;
  InnerPolicy inner_exec;
};


template<class T1, class T2>
struct is_execution_policy<__nested_execution_policy<T1,T2>>
  : std::integral_constant<
      bool,
      is_execution_policy<T1>::value && is_execution_policy<T2>::value
    >
{};


template<class OuterPolicy, class InnerPolicy>
__nested_execution_policy<OuterPolicy,InnerPolicy> __make_nested(const OuterPolicy outer, const InnerPolicy &inner)
{
  return __nested_execution_policy<OuterPolicy,InnerPolicy>{outer,inner};
}


template<class T, class Result = void>
struct __enable_if_execution_policy
  : enable_if<is_execution_policy<T>::value,Result>
{};


template<class T, class Result = void>
struct __disable_if_execution_policy
  : enable_if<!is_execution_policy<T>::value,Result>
{};


template<class... Types>
struct __last_type_impl
{
  typedef typename std::tuple_element<sizeof...(Types) - 1, std::tuple<Types...>>::type type;
};


template<>
struct __last_type_impl<>
{
  typedef void type;
};


template<class... Types>
using __last_type = typename __last_type_impl<Types...>::type;


template<class Result, class... Args>
struct __enable_if_nested_call
  : __enable_if_execution_policy<__last_type<Args...>, Result>
{};


template<class Result, class... Args>
struct __disable_if_nested_call
  : __disable_if_execution_policy<__last_type<Args...>, Result>
{};


template<class,class> class __grouped_execution_policy;


template<class ExecutionPolicy, class FlatExecutionGroup>
struct is_execution_policy<__grouped_execution_policy<ExecutionPolicy,FlatExecutionGroup>>
  : is_execution_policy<ExecutionPolicy>
{};


template<class ExecutionPolicy, class FlatExecutionGroup>
class __grouped_execution_policy
{
  public:
    static_assert(is_execution_policy<ExecutionPolicy>::value == true, "__grouped_execution_policy's ExecutionPolicy parameter must be an execution policy type.");
    static_assert(execution_group_traits<FlatExecutionGroup>::depth == 1, "__grouped_execution_policy's execution group must be flat (have depth == 1).");

    typedef FlatExecutionGroup                                      group_type;
    typedef typename execution_group_traits<group_type>::child_type agent_type;

    typedef typename execution_group_traits<group_type>::param_type group_param_type;
    typedef typename execution_group_traits<agent_type>::param_type agent_param_type;

    __grouped_execution_policy(const __grouped_execution_policy& other)
      : params_(other.params_)
    {}

    __grouped_execution_policy(const group_param_type& group_params, const agent_param_type& agent_params = agent_param_type())
      : params_(group_params, agent_params)
    {}

    const std::tuple<group_param_type,agent_param_type> &params() const
    {
      return params_;
    }

    template<class OtherFlatExecutionGroup, class... Args>
    __grouped_execution_policy<ExecutionPolicy,OtherFlatExecutionGroup> make(Args&&... args) const
    {
      typedef typename __grouped_execution_policy<ExecutionPolicy,OtherFlatExecutionGroup>::group_param_type group_param_type;
      group_param_type group_params(std::forward<Args>(args)...);
      return __grouped_execution_policy<ExecutionPolicy,OtherFlatExecutionGroup>(group_params);
    }

    // this is the nested form of operator()
    template<class OtherExecutionPolicy>
    __nested_execution_policy<__grouped_execution_policy, OtherExecutionPolicy>
      operator()(size_t n, OtherExecutionPolicy &&exec) const
    {
      return __make_nested(operator()(n), exec);
    }

    // only enable this operator() if the last parameter in (Arg1, Args...) is not an execution policy
    // this is the flat form of operator()
    template<class Arg1, class... Args>
    typename __disable_if_nested_call<__grouped_execution_policy, Arg1, Args...>::type
      operator()(Arg1&& arg1, Args&&... args) const
    {
      return make<FlatExecutionGroup>(std::forward<Arg1>(arg1), std::forward<Args>(args)...);
    }

  private:
    std::tuple<group_param_type, agent_param_type> params_;
};


class sequential_execution_policy;


template<> struct is_execution_policy<sequential_execution_policy> : std::true_type {};
    

class sequential_execution_policy : public __grouped_execution_policy<sequential_execution_policy,sequential_group<>>
{
  private:
    using super_t = __grouped_execution_policy<sequential_execution_policy,sequential_group<>>;

  public:
    inline sequential_execution_policy(const super_t& other) : super_t(other) {} 
    inline sequential_execution_policy(size_t indices_begin, size_t indices_end) : __grouped_execution_policy(sequential_group<>::param_type(indices_begin, indices_end)) {}
    inline sequential_execution_policy(size_t n) : sequential_execution_policy(0,n) {}
};


class parallel_execution_policy;


template<> struct is_execution_policy<parallel_execution_policy> : std::true_type {};


class parallel_execution_policy : public __grouped_execution_policy<parallel_execution_policy,parallel_group<>>
{
  private:
    using super_t = __grouped_execution_policy<parallel_execution_policy,parallel_group<>>;

  public:
    inline parallel_execution_policy(const super_t& other) : super_t(other) {} 
    inline parallel_execution_policy(size_t indices_begin, size_t indices_end) : __grouped_execution_policy(parallel_group<>::param_type(indices_begin, indices_end)) {}
    inline parallel_execution_policy(size_t n) : parallel_execution_policy(0,n) {}
};


class concurrent_execution_policy;


template<> struct is_execution_policy<concurrent_execution_policy> : std::true_type {};


class concurrent_execution_policy
{
  public:
    inline concurrent_execution_policy(size_t n) : rng{0,n} {}

    template<class ExecutionPolicy>
    __nested_execution_policy<concurrent_execution_policy, ExecutionPolicy> operator()(size_t n, ExecutionPolicy &&exec) const
    {
      return __make_nested(operator()(n), exec);
    }

    inline concurrent_execution_policy operator()(size_t n) const
    {
      return concurrent_execution_policy(n);
    }

    template<class FlatExecutionGroup, class... Args>
    __grouped_execution_policy<concurrent_execution_policy,FlatExecutionGroup> make(Args&&... args) const
    {
      typedef typename __grouped_execution_policy<concurrent_execution_policy,FlatExecutionGroup>::group_param_type group_param_type;
      group_param_type group_params(std::forward<Args>(args)...);
      return __grouped_execution_policy<concurrent_execution_policy,FlatExecutionGroup>(group_params);
    }

//  private:
    __integer_range rng;
};


//constexpr sequential_execution_policy seq{0};
//constexpr parallel_execution_policy   par{0};
//constexpr concurrent_execution_policy con{0};
const sequential_execution_policy seq{0};
const parallel_execution_policy   par{0};
const concurrent_execution_policy con{0};


template<class FlatExecutionGroup, class Function, class... Args>
void sync(const __grouped_execution_policy<sequential_execution_policy,FlatExecutionGroup> &exec, Function f, Args&&... args)
{
  exception_list exceptions;

  try
  {
    typedef execution_group_traits<FlatExecutionGroup> traits;
    typedef typename traits::child_type                agent_type;

    auto this_group = traits::make(exec.params(), std::make_tuple(0, 0));
    agent_type& this_agent = this_group.child();

    __scoped_group scope(this_group);

    // execute agents sequentially
    auto rng = traits::range(std::get<0>(exec.params()));
    for(auto agent_idx = rng.begin();
        agent_idx < rng.end();
        ++agent_idx)
    {
      // reindex the current agent
      execution_group_traits<agent_type>::reindex(this_agent, agent_idx);

      f(this_group, args...);
    }
  } // end try
  catch(...)
  {
    __add_current_exception(exceptions);
    throw exceptions;
  } // end catch
}


template<class FlatExecutionGroup, class Function, class... Args>
future<void> __async(const __grouped_execution_policy<sequential_execution_policy,FlatExecutionGroup> &exec, Function f, Args&&... args)
{
  // XXX could generalize the launch policy to allow concurrent_execution_policy to make use of this
  return std::async(std::launch::deferred, [=](Args&&... args)
  {
    std::sync(exec, f, std::forward<Args>(args)...);
  });
}


template<class ExecutionGroup>
class __subgroup
{
  public:
    typedef execution_group_traits<ExecutionGroup> parent_traits;
    typedef typename parent_traits::param_type     parent_param_type;
    typedef typename parent_traits::size_type      size_type;
    typedef typename parent_traits::child_type     child_type;

    class param_type
    {
      public:
        param_type(size_type begin, size_type end, const parent_param_type &parent_params)
          : begin_(begin),
            end_(end),
            parent_params_(parent_params)
        {}

        size_type begin() const
        {
          return begin_;
        }

        size_type end() const
        {
          return end_;
        }

        const parent_param_type &parent_params() const
        {
          return parent_params_;
        }

      private:
        size_type begin_, end_;
        parent_param_type parent_params_;
    };

    template<class ParamTuple, class IndexTuple>
    __subgroup(size_type begin, size_type end, const ParamTuple& parent_params, const IndexTuple& indices)
      : indices_begin_(begin),
        indices_end_(end),
        group_(parent_traits::make(parent_params, indices))
    {}

    // tease __subgroup's params out of the ParamTuple's first element
    // and forward everything along to the other constructor
    template<class ParamTuple, class IndexTuple>
    __subgroup(const ParamTuple& params, const IndexTuple& indices)
      : __subgroup(std::get<0>(params).begin(),
                   std::get<0>(params).end(),
                   params,
                   indices)
    {}

    param_type param() const
    {
      return param_type(indices_begin(), indices_end(), group().param());
    }

    size_type indices_begin() const
    {
      return indices_begin_;
    }

    size_type indices_end() const
    {
      return indices_end_;
    }

    size_type size() const
    {
      return indices_end() - indices_begin();
    }

    ExecutionGroup &group()
    {
      return group_;
    }

    const ExecutionGroup &group() const
    {
      return group_;
    }

    size_type index() const
    {
      return group().index();
    }

    child_type &child()
    {
      return group().child();
    }

  private:
    size_type indices_begin_;
    size_type indices_end_;
    ExecutionGroup group_;
};


// declare ExecutionPolicy-based async for the functions below
template<class ExecutionPolicy, class Function, class... Args>
typename __enable_if_execution_policy<decay_t<ExecutionPolicy>,std::future<void>>::type
async(ExecutionPolicy&& exec, Function&& f, Args&&... args);


template<class FlatExecutionGroup, class Function, class... Args>
void sync(const __grouped_execution_policy<concurrent_execution_policy,FlatExecutionGroup> &exec, Function f, Args&&... args)
{
  typedef execution_group_traits<FlatExecutionGroup> traits;
  
  auto rng = traits::range(std::get<0>(exec.params()));
  
  std::vector<std::future<void>> futures(rng.end() - rng.begin());
  
  // launch agents
  // XXX could we use the __subgroup idiom here?
  for(auto agent_idx = rng.begin();
      agent_idx < rng.end();
      ++agent_idx)
  {
    // XXX could call std::async(seq) here with a subgroup if async(seq)'s launch policy was generalized
    futures[agent_idx] = std::async(std::launch::async, [=](Args&&... args)
    {
      auto this_group = traits::make(exec.params(), std::make_tuple(0, agent_idx));
  
      __scoped_group scope(this_group);
  
      f(this_group, args...);
    },
    std::forward<Args>(args)...);
  }
  
  __flatten_and_throw_exceptions(futures.begin(), futures.end());
}


template<class Function, class... Args>
void sync(const concurrent_execution_policy &exec, Function f, Args&&... args)
{
  __integer_range rng = exec.rng.size() > 0 ? exec.rng : __integer_range{0,1};
  
  // create a barrier
  std::barrier barrier(rng.end() - rng.begin());
  
  auto group_params = concurrent_group<>::param_type(rng.begin(),rng.end(),barrier);
  typedef __grouped_execution_policy<concurrent_execution_policy,concurrent_group<>> policy_type;
  
  policy_type grouped_policy(group_params);
  
  std::sync(grouped_policy, f, std::forward<Args>(args)...);
}


template<class FlatExecutionGroup, class Function, class... Args>
future<void> __async(const __grouped_execution_policy<concurrent_execution_policy,FlatExecutionGroup> &exec, Function f, Args&&... args)
{
  return std::async(std::launch::async, [=](Args&&... args)
  {
    std::sync(exec, f, std::forward<Args>(args)...);
  },
  std::forward<Args>(args)...);
}


template<class Function, class... Args>
std::future<void> __async(const concurrent_execution_policy &exec, Function f, Args&&... args)
{
  return std::async(std::launch::async, [=](Args&&... args)
  {
    std::sync(exec, f, std::forward<Args>(args)...);
  },
  std::forward<Args>(args)...);
}


inline unsigned int __log2(unsigned int x)
{
  unsigned int result = 0;
  while(x >>= 1) ++result;
  return result;
}


template<class FlatExecutionGroup, class Function, class... Args>
future<void> __async(const __grouped_execution_policy<parallel_execution_policy,FlatExecutionGroup> &exec, Function f, Args&&... args)
{
  typedef execution_group_traits<FlatExecutionGroup> traits;
  typedef typename traits::size_type                 size_type;

  auto group_params = std::get<0>(exec.params());

  auto rng = traits::range(group_params);
  auto group_size = rng.end() - rng.begin();

  const size_type min_num_agents_per_launch = 1000;
  size_type num_concurrent_agents = (group_size + min_num_agents_per_launch - 1) / min_num_agents_per_launch;
  const size_type subscription = std::max(1u, __log2(std::min(1u,std::thread::hardware_concurrency())));

  num_concurrent_agents = std::min<size_t>(subscription * std::thread::hardware_concurrency(), num_concurrent_agents);
  const size_type num_seq_agents_per_concurrent = (group_size + num_concurrent_agents - 1) / num_concurrent_agents;

  return std::async(std::con.make<parallel_group<>>(num_concurrent_agents), [=](parallel_group<> &g, Args&&... args)
  {
    auto subgroup_begin = g.child().index() * num_seq_agents_per_concurrent;
    auto subgroup_end   = std::min(group_size, subgroup_begin + num_seq_agents_per_concurrent);

    std::sync(std::seq.make<__subgroup<FlatExecutionGroup>>(subgroup_begin, subgroup_end, group_params), [=](__subgroup<FlatExecutionGroup> &subgroup, Args&&... args)
    {
      f(subgroup.group(), args...);
    },
    std::forward<Args>(args)...);
  },
  std::forward<Args>(args)...);
}


template<class FlatExecutionGroup, class Function, class... Args>
void sync(const __grouped_execution_policy<parallel_execution_policy,FlatExecutionGroup> &exec, Function f, Args&&... args)
{
  return std::async(exec, std::forward<Function>(f), std::forward<Args>(args)...).wait();
}


template<class OuterPolicy, class InnerPolicy, class Function>
struct __async_outer_functor
{
  template<class OuterGroup, class Index>
  struct inner_functor
  {
    OuterGroup &outer_group;
    Function f;
    Index inner_idx;

    template<class InnerGroup, class... Args>
    void operator()(InnerGroup& inner_group, Args&&... args) const
    {
      // reindex the inner group
      execution_group_traits<InnerGroup>::reindex(inner_group, inner_idx);

      // create a new group by rebinding the outer group's child
      auto rebound_group = execution_group_traits<OuterGroup>::rebind_child(outer_group, std::move(inner_group));

      __scoped_group scope(rebound_group);

      // call f
      f(rebound_group, args...);
    }
  };

  __nested_execution_policy<OuterPolicy,InnerPolicy> exec_args;
  Function f;

  template<class OuterGroup, class... Args>
  void operator()(OuterGroup& outer_group, Args&&... args) const
  {
    typedef typename execution_group_traits<OuterGroup>::size_type size_type;

    std::async(exec_args.inner_exec, inner_functor<OuterGroup,size_type>{outer_group, f, outer_group.child().index()}, args...).wait();
  }
};


template<class OuterPolicy, class InnerPolicy, class Function, class... Args>
std::future<void> __async(const __nested_execution_policy<OuterPolicy,InnerPolicy> &exec_args, Function f, Args&&... args)
{
  // XXX use __async_outer_functor because gcc 4.8 has trouble with lambdas + parameter packs
  return std::async(exec_args.outer_exec, __async_outer_functor<OuterPolicy,InnerPolicy,Function>{exec_args,f}, args...);
}


template<class ExecutionPolicy, class Function, class... Args>
typename __enable_if_execution_policy<decay_t<ExecutionPolicy>,future<void>>::type
async(ExecutionPolicy&& exec, Function&& f, Args&&... args)
{
  return __async(std::forward<ExecutionPolicy>(exec), std::forward<Function>(f), std::forward<Args>(args)...);
}


} // end std

